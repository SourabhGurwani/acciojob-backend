// src/utils/zipGenerator.js
import JSZip from 'jszip';
import { promisify } from 'util';
import { writeFile, mkdir } from 'fs';
import { join } from 'path';

const writeFileAsync = promisify(writeFile);
const mkdirAsync = promisify(mkdir);

export const generateComponentZip = async (component, options = {}) => {
  const zip = new JSZip();
  const { includeReadme = true } = options;

  // 1. Add component files
  zip.file(`${component.name}.jsx`, component.jsxCode);
  zip.file(`${component.name}.module.css`, component.cssCode);

  // 2. Add optional README
  if (includeReadme) {
    zip.file('README.md', `# ${component.name}\n\n` +
      `Generated by AccioJob Component Generator\n\n` +
      `## Usage\n` +
      `1. Import component:\n` +
      `   \`\`\`js\n` +
      `   import ${component.name} from './${component.name}';\n` +
      `   \`\`\`\n\n` +
      `Created: ${new Date(component.lastUpdated).toLocaleString()}`);
  }

  // 3. Generate ZIP buffer
  return zip.generateAsync({
    type: 'nodebuffer',
    compression: 'DEFLATE',
    compressionOptions: { level: 6 }
  });
};

export const saveZipToDisk = async (zipBuffer, componentName, outputPath = './exports') => {
  try {
    await mkdirAsync(outputPath, { recursive: true });
    const filePath = join(outputPath, `${componentName}.zip`);
    await writeFileAsync(filePath, zipBuffer);
    return filePath;
  } catch (error) {
    console.error('Failed to save ZIP:', error);
    throw new Error('Could not save export file');
  }
};

// For direct API responses
export const sendZipResponse = (res, zipBuffer, componentName) => {
  res.set('Content-Type', 'application/zip');
  res.set('Content-Disposition', `attachment; filename=${componentName}.zip`);
  res.send(zipBuffer);
};